using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using WSharp.Wpf.Extensions;

namespace WSharp.Wpf.Helpers
{
    public static class DataGridHelper
    {
        #region AutoGeneratedCheckBoxStyle

        private static DataGrid suppressComboAutoDropDown;

        public static readonly DependencyProperty AutoGeneratedCheckBoxStyleProperty = DependencyProperty.RegisterAttached(
            "AutoGeneratedCheckBoxStyle", 
            typeof(Style), 
            typeof(DataGridHelper),
            new PropertyMetadata(default(Style), AutoGeneratedCheckBoxStylePropertyChangedCallback));

        public static void SetAutoGeneratedCheckBoxStyle(DependencyObject element, Style value)
            => element.SetValue(AutoGeneratedCheckBoxStyleProperty, value);

        public static Style GetAutoGeneratedCheckBoxStyle(DependencyObject element)
            => (Style)element.GetValue(AutoGeneratedCheckBoxStyleProperty);

        private static void AutoGeneratedCheckBoxStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (!(d is DataGrid datagrid))
                return;

            datagrid.AutoGeneratingColumn += (sender, args) =>
            {
                if (!(args.Column is DataGridCheckBoxColumn dataGridCheckBoxColumn)) 
                    return;

                dataGridCheckBoxColumn.ElementStyle = GetAutoGeneratedCheckBoxStyle(d);
            };
        }

        #endregion AutoGeneratedCheckBoxStyle

        #region AutoGeneratedEditingCheckBoxStyle

        public static readonly DependencyProperty AutoGeneratedEditingCheckBoxStyleProperty = DependencyProperty.RegisterAttached(
            "AutoGeneratedEditingCheckBoxStyle", 
            typeof(Style), 
            typeof(DataGridHelper),
            new PropertyMetadata(default(Style), AutoGeneratedEditingCheckBoxStylePropertyChangedCallback));

        public static void SetAutoGeneratedEditingCheckBoxStyle(DependencyObject element, Style value)
            => element.SetValue(AutoGeneratedEditingCheckBoxStyleProperty, value);

        public static Style GetAutoGeneratedEditingCheckBoxStyle(DependencyObject element)
            => (Style)element.GetValue(AutoGeneratedEditingCheckBoxStyleProperty);

        private static void AutoGeneratedEditingCheckBoxStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (!(d is DataGrid datagrid))
                return;

            datagrid.AutoGeneratingColumn += (sender, args) =>
            {
                if (!(args.Column is DataGridCheckBoxColumn dataGridCheckBoxColumn))
                    return;

                dataGridCheckBoxColumn.EditingElementStyle = GetAutoGeneratedEditingCheckBoxStyle(d);
            };
        }

        #endregion AutoGeneratedEditingCheckBoxStyle

        #region AutoGeneratedEditingTextStyle

        public static readonly DependencyProperty AutoGeneratedEditingTextStyleProperty = DependencyProperty.RegisterAttached(
            "AutoGeneratedEditingTextStyle", 
            typeof(Style),
            typeof(DataGridHelper),
            new PropertyMetadata(default(Style), AutoGeneratedEditingTextStylePropertyChangedCallback));

        public static void SetAutoGeneratedEditingTextStyle(DependencyObject element, Style value)
            => element.SetValue(AutoGeneratedEditingTextStyleProperty, value);

        public static Style GetAutoGeneratedEditingTextStyle(DependencyObject element)
            => (Style)element.GetValue(AutoGeneratedEditingTextStyleProperty);

        private static void AutoGeneratedEditingTextStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (!(d is DataGrid datagrid))
                return;

            datagrid.AutoGeneratingColumn += (sender, args) =>
            {
                if (!(args.Column is DataGridTextColumn dataGridTextColumn)) return;

                dataGridTextColumn.EditingElementStyle = GetAutoGeneratedEditingTextStyle(d);
            };
        }

        #endregion AutoGeneratedEditingTextStyle

        #region CellPadding

        public static readonly DependencyProperty CellPaddingProperty = DependencyProperty.RegisterAttached(
            "CellPadding",
            typeof(Thickness),
            typeof(DataGridHelper),
            new FrameworkPropertyMetadata(
                new Thickness(13, 8, 8, 8), 
                FrameworkPropertyMetadataOptions.Inherits));

        public static void SetCellPadding(DependencyObject element, Thickness value) 
            => element.SetValue(CellPaddingProperty, value);

        public static Thickness GetCellPadding(DependencyObject element) 
            => (Thickness)element.GetValue(CellPaddingProperty);

        #endregion CellPadding

        #region ColumnHeaderPadding

        public static readonly DependencyProperty ColumnHeaderPaddingProperty = DependencyProperty.RegisterAttached(
            "ColumnHeaderPadding", 
            typeof(Thickness),
            typeof(DataGridHelper),
            new FrameworkPropertyMetadata(new Thickness(8), FrameworkPropertyMetadataOptions.Inherits));

        public static void SetColumnHeaderPadding(DependencyObject element, Thickness value) 
            => element.SetValue(ColumnHeaderPaddingProperty, value);

        public static Thickness GetColumnHeaderPadding(DependencyObject element)
            => (Thickness)element.GetValue(ColumnHeaderPaddingProperty);

        #endregion ColumnHeaderPadding

        #region EnableEditBoxHelper

        public static readonly DependencyProperty EnableEditBoxHelperProperty = DependencyProperty.RegisterAttached(
            "EnableEditBoxHelper",
            typeof(bool), 
            typeof(DataGridHelper),
            new PropertyMetadata(default(bool), EnableCheckBoxHelperPropertyChangedCallback));

        public static void SetEnableEditBoxHelper(DependencyObject element, bool value) 
            => element.SetValue(EnableEditBoxHelperProperty, value);

        public static bool GetEnableEditBoxHelper(DependencyObject element) 
            => (bool)element.GetValue(EnableEditBoxHelperProperty);

        private static void EnableCheckBoxHelperPropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (!(d is DataGrid dataGrid)) 
                return;

            if ((bool)e.NewValue)
            {
                dataGrid.PreviewMouseLeftButtonDown += DataGridOnPreviewMouseLeftButtonDown;
                dataGrid.KeyDown += DataGridOnKeyDown;
            }
            else
            {
                dataGrid.PreviewMouseLeftButtonDown -= DataGridOnPreviewMouseLeftButtonDown;
                dataGrid.KeyDown -= DataGridOnKeyDown;
            }
        }

        private static void DataGridOnKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Space && e.OriginalSource is DataGridCell cell &&
                cell.IsReadOnly == false && cell.Column is DataGridComboBoxColumn &&
                sender is DataGrid dataGrid)
                _ = dataGrid.BeginEdit();
        }

        private static void DataGridOnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs args)
        {
            if (!(sender is DataGrid dataGrid))
                return;

            var inputHitTest =
                dataGrid.InputHitTest(args.GetPosition(dataGrid)) as DependencyObject;

            while (inputHitTest != null)
            {
                if (inputHitTest is DataGridCell dataGridCell && 
                    dataGrid.Equals(dataGridCell.GetVisualAncestry().OfType<DataGrid>().FirstOrDefault()))
                {
                    if (dataGridCell.IsReadOnly) 
                        return;

                    if (IsDirectHitOnEditComponent(dataGridCell, args, out ToggleButton toggleButton))
                    {
                        dataGrid.CurrentCell = new DataGridCellInfo(dataGridCell);
                        _ = dataGrid.BeginEdit();
                        toggleButton.SetCurrentValue(ToggleButton.IsCheckedProperty, !toggleButton.IsChecked);
                        _ = dataGrid.CommitEdit();
                        args.Handled = true;
                    }
                    else if (IsDirectHitOnEditComponent(dataGridCell, args, out ComboBox comboBox))
                    {
                        if (suppressComboAutoDropDown != null)
                            return;

                        dataGrid.CurrentCell = new DataGridCellInfo(dataGridCell);
                        _ = dataGrid.BeginEdit();

                        //check again, as we move to  the edit  template
                        if (IsDirectHitOnEditComponent(dataGridCell, args, out comboBox))
                        {
                            suppressComboAutoDropDown = dataGrid;
                            comboBox.DropDownClosed += ComboBoxOnDropDownClosed;
                            comboBox.IsDropDownOpen = true;
                        }
                        args.Handled = true;
                    }

                    return;
                }

                inputHitTest = (inputHitTest is Visual || inputHitTest is Visual3D)
                    ? VisualTreeHelper.GetParent(inputHitTest)
                    : null;
            }
        }

        private static void ComboBoxOnDropDownClosed(object sender, EventArgs eventArgs)
        {
            _ = suppressComboAutoDropDown.CommitEdit();
            suppressComboAutoDropDown = null;
            if (!(sender is ComboBox combobox))
                return;

            combobox.DropDownClosed -= ComboBoxOnDropDownClosed;
        }

        private static bool IsDirectHitOnEditComponent<TControl>(ContentControl contentControl, MouseEventArgs mouseButtonEventArgs, out TControl control)
            where TControl : Control
        {
            control = contentControl.Content as TControl;
            if (control == null) 
                return false;

            if (!(VisualTreeHelper.GetChild(contentControl, 0) is FrameworkElement frameworkElement))
                return false;

            var transformToAncestor = (MatrixTransform)control.TransformToAncestor(frameworkElement);
            var rect = new Rect(
                new Point(transformToAncestor.Value.OffsetX, transformToAncestor.Value.OffsetY),
                new Size(control.ActualWidth, control.ActualHeight));

            return rect.Contains(mouseButtonEventArgs.GetPosition(frameworkElement));
        }

        #endregion EnableEditBoxHelper
    }
}
