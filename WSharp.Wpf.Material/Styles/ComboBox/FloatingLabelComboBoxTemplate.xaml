<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:WSharp.Wpf.Controls;assembly=WSharp.Wpf"
    xmlns:converters="clr-namespace:WSharp.Wpf.Converters;assembly=WSharp.Wpf"
    xmlns:helpers="clr-namespace:WSharp.Wpf.Helpers;assembly=WSharp.Wpf">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/WSharp.Wpf.Material;component/Styles/ComboBox/ToggleButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/WSharp.Wpf.Material;component/Styles/ComboBox/ComboBoxEditableTextBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/WSharp.Wpf.Material;component/Styles/ComboBox/PopupContentClassicTemplate.xaml" />
        <ResourceDictionary Source="pack://application:,,,/WSharp.Wpf.Material;component/Styles/ComboBox/PopupContentDownTemplate.xaml" />
        <ResourceDictionary Source="pack://application:,,,/WSharp.Wpf.Material;component/Styles/ComboBox/PopUpContentUpTemplate.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:MathConverter x:Key="DivisionMathConverter" Operation="Divide" />

    <ControlTemplate x:Key="FloatingLabelComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid
            x:Name="templateRoot"
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="True">
            <Grid x:Name="InnerRoot">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                </Grid.ColumnDefinitions>

                <ToggleButton
                    x:Name="toggleButton"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxToggleButton}" />

                <Grid
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Grid x:Name="InputRoot" HorizontalAlignment="Left">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsHitTestVisible="False" />
                        <TextBox
                            x:Name="PART_EditableTextBox"
                            HorizontalAlignment="Left"
                            HorizontalContentAlignment="Stretch"
                            CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
                            IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxEditableTextBox}"
                            Visibility="Collapsed" />

                        <controls:SmartLabel
                            x:Name="Label"
                            FloatingOffset="{Binding Path=(helpers:LabelHelper.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"
                            FloatingScale="{Binding Path=(helpers:LabelHelper.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                            FontSize="{TemplateBinding FontSize}"
                            Label="{TemplateBinding helpers:LabelHelper.Label}"
                            LabelOpacity="{Binding Path=(helpers:LabelHelper.LabelOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                            LabelProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:LabelProxyConverter.Instance}}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            UseFloating="{Binding Path=(helpers:LabelHelper.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
                    </Grid>

                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                        <TextBlock
                            FontSize="{TemplateBinding FontSize}"
                            Opacity="{Binding Path=(helpers:LabelHelper.LabelOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                            Text="{Binding Path=(helpers:TextFieldHelper.SuffixText), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Button
                            x:Name="PART_ClearButton"
                            Height="Auto"
                            Padding="2,0,-6,0"
                            Style="{DynamicResource ToolButton}">
                            <Button.Visibility>
                                <MultiBinding Converter="{x:Static converters:InvertedMultiBooleanAndToVisibilityConverter.Instance}">
                                    <Binding
                                        Converter="{x:Static converters:InvertedBooleanConverter.Instance}"
                                        ElementName="Label"
                                        Path="IsContentNullOrEmpty" />
                                    <Binding Path="(helpers:TextFieldHelper.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </Button.Visibility>
                            <controls:Icon Margin="0" Resource="{StaticResource CloseCircle}" />
                        </Button>
                    </StackPanel>
                </Grid>

                <Line
                    x:Name="DashedLine"
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    VerticalAlignment="Bottom"
                    Opacity="0.56"
                    Stroke="{TemplateBinding BorderBrush}"
                    StrokeDashArray="1,2.5"
                    StrokeDashCap="Round"
                    StrokeThickness="{Binding BorderThickness.Bottom, ElementName=toggleButton, Converter={StaticResource DivisionMathConverter}, ConverterParameter=0.75}"
                    Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Converter={x:Static converters:InvertedBooleanToVisibilityConverter.Instance}}"
                    X1="0"
                    X2="{Binding ActualWidth, ElementName=toggleButton}"
                    Y1="0"
                    Y2="0" />

                <controls:Underline
                    x:Name="Underline"
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    Background="{Binding Path=(helpers:TextFieldHelper.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}"
                    IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                    Visibility="{Binding Path=(helpers:TextFieldHelper.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />

                <Canvas Grid.Column="0" VerticalAlignment="Bottom">
                    <TextBlock
                        Canvas.Top="2"
                        MaxWidth="{Binding ActualWidth, ElementName=toggleButton}"
                        FontSize="10"
                        Opacity="{Binding Path=(helpers:LabelHelper.LabelOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                        Text="{Binding Path=(helpers:LabelHelper.HelperText), RelativeSource={RelativeSource TemplatedParent}}" />
                </Canvas>

                <controls:ComboBoxPopup
                    x:Name="PART_Popup"
                    Grid.Column="0"
                    AllowsTransparency="true"
                    ClassicContentTemplate="{StaticResource PopupContentClassicTemplate}"
                    ClassicMode="{Binding Path=(helpers:ComboBoxHelper.ClassicMode), RelativeSource={RelativeSource TemplatedParent}}"
                    DefaultVerticalOffset="5"
                    DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                    DownVerticalOffset="-15.5"
                    Focusable="False"
                    HorizontalOffset="-11.5"
                    IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Custom"
                    PlacementTarget="{Binding ElementName=templateRoot}"
                    PopupAnimation="Fade"
                    SnapsToDevicePixels="True"
                    UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                    UpVerticalOffset="15"
                    UseLayoutRounding="True"
                    VerticalOffset="0">
                    <ContentControl>
                        <ScrollViewer
                            MinHeight="1"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Background="{Binding Background, ElementName=PART_Popup}">
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </ContentControl>
                </controls:ComboBoxPopup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="PopupPlacement" Value="{x:Static controls:EComboBoxPopupPlacement.Classic}">
                <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter TargetName="templateRoot" Property="Background" Value="{Binding Background, ElementName=PART_Popup}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="Opacity" Value="0.56" />
                <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(helpers:TextFieldHelper.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="helpers:LabelHelper.IsFloating" Value="True">
                <Setter TargetName="InnerRoot" Property="Margin" Value="0,11.5,0,0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False" />
                    <Condition Property="IsDropDownOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Underline" Property="Visibility" Value="Hidden" />
                <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Label" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition Property="helpers:LabelHelper.IsFloating" Value="True" />
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(helpers:LabelHelper.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Label" Property="LabelOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:LabelHelper.IsFloating" Value="True" />
                    <Condition SourceName="Label" Property="IsLabelInFloatingPosition" Value="True" />
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(helpers:LabelHelper.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Label" Property="LabelOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Label" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(helpers:LabelHelper.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Label" Property="LabelOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Label" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition Property="IsDropDownOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(helpers:LabelHelper.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Label" Property="LabelOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter TargetName="Underline" Property="IsActive" Value="True" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="Validation.HasError" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="Validation.HasError" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{Binding Path=(helpers:TextFieldHelper.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Underline" Property="Background" Value="{Binding Path=(helpers:TextFieldHelper.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>