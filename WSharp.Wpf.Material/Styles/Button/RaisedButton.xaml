<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:WSharp.Wpf.Controls;assembly=WSharp.Wpf"
    xmlns:converters="clr-namespace:WSharp.Wpf.Converters;assembly=WSharp.Wpf"
    xmlns:helpers="clr-namespace:WSharp.Wpf.Helpers;assembly=WSharp.Wpf">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/WSharp.Wpf.Material;component/Styles/Button/FocusVisual.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="RaisedButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="helpers:ButtonProgressHelper.IndicatorForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="helpers:ButtonProgressHelper.IndicatorBackground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="helpers:RippleHelper.Feedback" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="helpers:ShadowHelper.ShadowDepth" Value="Depth1" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="16,4,16,4" />
        <Setter Property="Height" Value="32" />
        <Setter Property="helpers:ButtonProgressHelper.IsIndicatorVisible" Value="False" />
        <Setter Property="helpers:ButtonProgressHelper.Opacity" Value=".4" />
        <Setter Property="helpers:ButtonHelper.CornerRadius" Value="2" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(helpers:ShadowHelper.CacheMode)}">
                            <Grid>
                                <Border
                                    x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(helpers:ButtonHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                    Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ShadowHelper.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}" />
                                <ProgressBar
                                    x:Name="ProgressBar"
                                    Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                                    Height="{TemplateBinding Height}"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressHelper.IndicatorBackground)}"
                                    Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressHelper.IndicatorForeground)}"
                                    IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressHelper.IsIndeterminate)}"
                                    Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressHelper.Maximum)}"
                                    Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressHelper.Minimum)}"
                                    Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressHelper.Opacity)}"
                                    Style="{DynamicResource MaterialDesignLinearProgressBar}"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressHelper.IsIndicatorVisible), Converter={x:Static converters:BooleanToVisibilityConverter.Instance}}"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressHelper.Value)}" />
                            </Grid>
                        </AdornerDecorator>
                        <controls:Ripple
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <controls:Ripple.Clip>
                                <MultiBinding Converter="{x:Static converters:BorderClipConverter.Instance}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </controls:Ripple.Clip>
                        </controls:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="helpers:ShadowHelper.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="helpers:ShadowHelper.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="RaisedLightButton"
        BasedOn="{StaticResource RaisedButton}"
        TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
    </Style>

    <Style
        x:Key="RaisedDarkButton"
        BasedOn="{StaticResource RaisedButton}"
        TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
    </Style>

    <Style
        x:Key="RaisedAccentButton"
        BasedOn="{StaticResource RaisedButton}"
        TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource SecondaryAccentBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryAccentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource SecondaryAccentForegroundBrush}" />
    </Style>

</ResourceDictionary>