<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:WSharp.Wpf.Controls;assembly=WSharp.Wpf"
    xmlns:converters="clr-namespace:WSharp.Wpf.Converters;assembly=WSharp.Wpf"
    xmlns:helpers="clr-namespace:WSharp.Wpf.Helpers;assembly=WSharp.Wpf"
    xmlns:material="clr-namespace:WSharp.Wpf.Material.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/WSharp.Wpf.Material;component/ValidationErrorTemplate.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:MathConverter x:Key="DivisionMathConverter" Operation="Divide" />

    <Style x:Key="TimePicker" TargetType="{x:Type controls:TimePicker}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="helpers:LabelHelper.Label" Value="Select time" />
        <Setter Property="ClockStyle" Value="{DynamicResource Clock}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationErrorTemplate}" />
        <Setter Property="ClockHostContentControlStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Style.Setters>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ContentControl}">
                                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(helpers:ShadowHelper.CacheMode)}">
                                        <Border Padding="16,8,16,24" Effect="{DynamicResource ShadowDepth4}">
                                            <ContentPresenter
                                                Content="{TemplateBinding ContentControl.Content}"
                                                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" />
                                        </Border>
                                    </AdornerDecorator>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style.Setters>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:TimePicker}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="TextBoxTemplate" TargetType="{x:Type TextBox}">
                            <Grid>
                                <ScrollViewer
                                    x:Name="PART_ContentHost"
                                    Focusable="false"
                                    HorizontalScrollBarVisibility="Hidden"
                                    VerticalScrollBarVisibility="Hidden" />
                                <controls:SmartLabel
                                    x:Name="Label"
                                    FloatingOffset="{Binding Path=(helpers:LabelHelper.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"
                                    FloatingScale="{Binding Path=(helpers:LabelHelper.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                    FontSize="{TemplateBinding FontSize}"
                                    Label="{Binding Path=(helpers:LabelHelper.Label), RelativeSource={RelativeSource TemplatedParent}}"
                                    LabelOpacity="{Binding Path=(helpers:LabelHelper.LabelOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                    LabelProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:LabelProxyConverter.Instance}}"
                                    UseFloating="{Binding Path=(helpers:LabelHelper.IsFloating), RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition SourceName="Label" Property="IsContentNullOrEmpty" Value="False" />
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Label" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                                    <Setter TargetName="Label" Property="LabelOpacity" Value="1" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                        <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                            <Grid Background="Transparent">
                                <Viewbox>
                                    <Canvas Width="24" Height="24">
                                        <Path Data="M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z" Fill="{TemplateBinding Foreground}" />
                                    </Canvas>
                                </Viewbox>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition GeneratedDuration="0" />
                                            <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                            <VisualTransition GeneratedDuration="0:0:0.1" To="Pressed" />
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver" />
                                        <VisualState x:Name="Pressed" />
                                        <VisualState x:Name="Disabled" />
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                            </Grid>
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="TemplateRoot">
                        <Border
                            x:Name="border"
                            Padding="0,4,0,4"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBox
                                    x:Name="PART_TextBox"
                                    Margin="0"
                                    helpers:TextFieldHelper.TextBoxViewMargin=".5 0 0 0"
                                    BorderThickness="0"
                                    Template="{StaticResource TextBoxTemplate}" />
                                <Button
                                    x:Name="PART_Button"
                                    Grid.Column="1"
                                    Height="17"
                                    Margin="4,0,0,-3"
                                    Padding="0"
                                    HorizontalAlignment="Right"
                                    Focusable="False"
                                    Foreground="{TemplateBinding BorderBrush}"
                                    Template="{StaticResource DropDownButtonTemplate}" />
                                <Popup
                                    x:Name="PART_Popup"
                                    AllowsTransparency="True"
                                    CustomPopupPlacementCallback="{x:Static helpers:CustomPopupPlacementCallbackHelper.LargePopupCallback}"
                                    Placement="Custom"
                                    PlacementTarget="{Binding ElementName=PART_TextBox}"
                                    PopupAnimation="Fade"
                                    StaysOpen="False" />
                            </Grid>
                        </Border>
                        <Line
                            x:Name="DashedLine"
                            VerticalAlignment="Bottom"
                            Opacity="0.56"
                            Stroke="{TemplateBinding BorderBrush}"
                            StrokeDashArray="1,2.5"
                            StrokeDashCap="Round"
                            StrokeThickness="{Binding BorderThickness.Bottom, ElementName=border, Converter={StaticResource DivisionMathConverter}, ConverterParameter=0.75}"
                            Visibility="Hidden"
                            X1="0"
                            X2="{Binding ActualWidth, ElementName=border}"
                            Y1="0"
                            Y2="0" />
                        <material:Underline x:Name="Underline" Visibility="{Binding Path=(helpers:TextFieldHelper.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="TemplateRoot" Property="Opacity" Value="0.56" />
                            <Setter TargetName="DashedLine" Property="Visibility" Value="Visible" />
                            <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="Underline" Property="IsActive" Value="True" />
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                            <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}" />
                        </Trigger>
                        <Trigger Property="helpers:LabelHelper.IsFloating" Value="True">
                            <Setter TargetName="border" Property="Margin" Value="0,12,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        x:Key="FloatingLabelTimePicker"
        BasedOn="{StaticResource TimePicker}"
        TargetType="{x:Type controls:TimePicker}">
        <Setter Property="helpers:LabelHelper.IsFloating" Value="True" />
    </Style>
</ResourceDictionary>